#!/usr/bin/env python3

"""servic6: a pretty wrapper around s6/s6-rc's utilities"""

__version__ = '0.3.1'
__author__ = 'Mihail Georgiev'
__email__ = 'misho88@gmail.com'
__copyright__ = 'Copyright 2022, Mihail Georgiev'
__license__ = 'GNU GPLv3'

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from argcomplete import autocomplete, warn, SuppressCompleter
from pathlib import Path
from os import environ
from subprocess import run, CalledProcessError, Popen, PIPE
from shlex import split, join, quote
from contextlib import ExitStack
from functools import wraps
from itertools import chain


def pack(*args):
    return args


DOC_PATH = environ.get('SERVICE6_DOC_PATH', '/usr/share/doc/service6')
DOC_NAMES = tuple(p.name for p in Path(DOC_PATH).iterdir())
PAGER = environ.get('PAGER', 'less ++G --quit-if-one-screen')
PAGER_HELP = environ.get('PAGER_HELP', 'less --quit-if-one-screen')
LOG_PATH = Path(environ.get('SERVICE6_LOG_PATH', '/var/log'))
LOG_OWNER = environ.get('SERVICE6_LOG_OWNER', 's6log')

SUDO = environ.get('SERVICE6_SUDO', '')
LIST_SUDO = environ.get('SERVICE6_LIST_SUDO', SUDO)
SUDO, LIST_SUDO = ( tuple(split(cmd)) for cmd in (SUDO, LIST_SUDO) )

ADMINSVPATH = Path('/etc/s6/adminsv')
SERVICEPATH = Path('/run/service')

CMD = {
    'list bundles'    : pack(*LIST_SUDO, 's6-rc-db', 'list', 'bundles'),
    'list services'   : pack(*LIST_SUDO, 's6-rc-db', 'list', 'services'),
    'list longruns'   : pack(*LIST_SUDO, 's6-rc-db', 'list', 'longruns'),
    'list oneshots'   : pack(*LIST_SUDO, 's6-rc-db', 'list', 'oneshots'),
    'list active'     : pack(*LIST_SUDO, 's6-rc', '-a', 'list'),
    'list in bundle'  : pack(*LIST_SUDO, 's6-rc-db', 'contents'),
    'pid'             : pack(*LIST_SUDO, 's6-svstat', '-o', 'pid'),
    'start'           : pack(*SUDO, 's6-rc', '-u', '-v', '2', 'change'),
    'stop'            : pack(*SUDO, 's6-rc', '-d', '-v', '2', 'change'),
    'add bundle'      : pack(*SUDO, 's6-rc-bundle', 'add'),
    'delete bundle'   : pack(*SUDO, 's6-rc-bundle', 'delete'),
    'rebuild database': pack(*SUDO, 's6-db-reload',),
    'mkdir'           : pack(*SUDO, 'mkdir', '-p'),
    'shell'           : pack(*SUDO, 'sh', '-c'),
    'touch'           : pack(*SUDO, 'touch',),
    'rm'              : pack(*SUDO, 'rm',),
    'rmdir'           : pack(*SUDO, 'rmdir',),
}


def get_set(cmd):
    return set(run(
        cmd,
        capture_output=True,
        check=True,
    ).stdout.decode().splitlines())


def parallel(argvs) -> list:  # type: ignore
    with ExitStack() as stack:
        procs = [
            stack.enter_context(Popen(argv, stdout=PIPE, stderr=PIPE))
            for argv in argvs
        ]
        outputs = [ proc.stdout.read() for proc in procs ]  # type: ignore
        for i, proc in enumerate(procs):
            returncode = proc.wait()
            if returncode:
                raise CalledProcessError(
                    returncode,
                    proc.args,
                    outputs[i],
                    proc.stderr.read(),  # type: ignore
                )
        return outputs


def path_completer(**kwargs):
    path = environ['PATH'].split(':')
    return [
        exe.name
        for dir in path
        for exe in Path(dir).iterdir()
        if exe.lstat().st_mode & 0o100400  # regular file, executable
    ]


def lines(output):
    return output.decode().splitlines()


def with_completion_failed_message(func):
    @wraps(func)
    def closure(**kwargs):
        try:
            return func(**kwargs)
        except CalledProcessError as e:
            warn(f'Completion failed: {e.stderr.decode()}')
    return closure


@with_completion_failed_message
def complete_bundle(**kwargs):
    return get_set(CMD['list bundles'])


@with_completion_failed_message
def complete_add(*, parsed_args=None, **kwargs):
    results = parallel((
        CMD['list services'],
        CMD['list bundles'],
    ))
    services, bundles = ( set(lines(r)) for r in results )

    bundle = parsed_args.bundle
    if bundle in bundles:
        bundle_services = set(lines(run(
            CMD['list in bundle'] + (bundle,),
            capture_output=True,
            check=True,
        )))
        services -= bundle_services
        bundles.remove(bundle)

    return services | bundles


@with_completion_failed_message
def complete_delete(*, parsed_args=None, **kwargs):
    results = parallel((
        CMD['list bundles'],
        CMD['list in bundle'] + (parsed_args.bundle,),
    ))
    other_bundles, bundle_services = ( set(lines(r)) for r in results )

    other_bundles.remove(parsed_args.bundle)

    results = parallel((CMD['list in bundle'] + (b,) for b in other_bundles))
    other_bundles_services = ( set(lines(r)) for r in results )
    bundles = {
        name
        for name, srvs in zip(other_bundles, other_bundles_services)
        if srvs <= bundle_services
    }
    return bundle_services | bundles


@with_completion_failed_message
def complete_start(**kwargs):
    results = parallel((
        CMD['list services'],
        CMD['list bundles'],
        CMD['list active'],
    ))

    services, bundles, active_services = ( set(lines(r)) for r in results )

    results = parallel((CMD['list in bundle'] + (b,) for b in bundles))
    bundles_services = ( set(lines(r)) for r in results )
    bundles = {
        name
        for name, srvs in zip(bundles, bundles_services)
        if not srvs <= active_services
    }

    services -= active_services
    return services | bundles


@with_completion_failed_message
def complete_stop(**kwargs):
    results = parallel((
        CMD['list bundles'],
        CMD['list active'],
    ))

    bundles, active_services = ( set(lines(r)) for r in results )

    results = parallel((CMD['list in bundle'] + (b,) for b in bundles))
    bundles_services = ( set(lines(r)) for r in results )
    bundles = {
        name
        for name, srvs in zip(bundles, bundles_services)
        if srvs <= active_services
    }

    return active_services | bundles


@with_completion_failed_message
def complete_restart(**kwargs):
    results = parallel(( CMD['list services'], CMD['list bundles'] ))
    services, bundles = ( set(lines(r)) for r in results )
    return services | bundles


def complete_log(**kwargs):
    return [
        d.name
        for d in LOG_PATH.iterdir()
        if d.is_dir() and d.owner() == LOG_OWNER
    ]


complete_list = complete_restart


def complete_help(**kwargs):
    return DOC_NAMES


path = Path(__file__)
app = path.name

bundle_commands = 'add', 'delete'
service_commands = 'start', 'stop', 'restart'
list_commands = 'list', 'log', 'help'
misc_commands = 'rebuild',

descriptions = {
    'add': 'add services to a bundle',
    'delete': 'delete services from a bundle',
    'start': 'start services',
    'stop': 'stop services',
    'restart': 'stop services and start them again',
    'log': 'view the logs for a service',
    'list': 'show information about bundles and services',
    'rebuild': 'rebuild the database (Artix specific)',
    'help': 'show documentation on s6 components',
}

completers = { cmd: globals().get(f'complete_{cmd}') for cmd in chain(
    bundle_commands,
    service_commands,
    list_commands,
    misc_commands,
    ('pager', 'bundle'),
) }

epilog = """\
Environment variables:
SERVICE6_DOC_PATH: where to look for documentation files
SERVICE6_LOG_PATH: where to look for service logs (generally /var/log)
SERVICE6_LOG_OWNER: who owns the S6 logs (generally s6log)
SERVICE6_SUDO: prepend this to all operations that need elevated privileges
    Good choice are 'su', 'sudo' or 'doas', while setting SERVICE6_LIST_SUDO
    to something noninteractive.
SERVICE6_LIST_SUDO: like SERVICE6_SUDO, but only to list operations, which
    should not alter the system state. Will inherit from SERVICE6_SUDO if
    not explicitly provided.
    Good choices are 'sudo -n' or 'doas -n'.
    This should be safer than SERVICE6_SUDO inasmuch as the system state
    should not change.\
"""

parser = ArgumentParser(
    prog=app,
    description='Frontend to s6-rc',
    epilog=epilog,
    formatter_class=RawDescriptionHelpFormatter,
)
subparsers = parser.add_subparsers(
    dest='command', required=True,
    help='top-level command'
)

for command in bundle_commands:
    subparser = subparsers.add_parser(
        command,
        help=descriptions.get(command, 'bundle command'),
    )
    subparser.add_argument(
        '--bundle', '-b', default='default',
        help='the bundle to operate on',
    ).completer = completers.get('bundle')  # type: ignore
    subparser.add_argument(
        'services', nargs='+',
        help='the service(s) to modify the bundle with',
    ).completer = completers.get(command)  # type: ignore

for command in service_commands:
    subparser = subparsers.add_parser(
        command,
        help=descriptions.get(command, 'service command'),
    )
    subparser.add_argument(
        'services', nargs='+',
        help='the service(s) to operate on',
    ).completer = completers.get(command)  # type: ignore

for command in list_commands:
    subparser = subparsers.add_parser(
        command,
        help=descriptions.get(command, 'miscellaneous command')
    )
    subparser.add_argument(
        '--columns', '-c', type=int,
        help='maximum number of columns to use (default: infer from terminal width)',
    ).completer = completers.get(command)  # type: ignore
    subparser.add_argument(
        'items', nargs='*',
        help='services or bundles',
    ).completer = completers.get(command)  # type: ignore

for command in misc_commands:
    subparser = subparsers.add_parser(
        command,
        help=descriptions.get(command, 'miscellaneous command')
    )

parser.add_argument(
    '--pager', '-p',
    help='override the pager (e.g., less); same as setting PAGER environment '
         'variable (NOTE: use :n and :p to switch buffers in less when '
         'viewing multiple items)',
).completer = completers['pager']  # type: ignore

autocomplete(parser, default_completer=SuppressCompleter)
args = parser.parse_args()

from natsort import natsorted, ns  # noqa: E402
from blessed import Terminal  # noqa: E402
from sys import stderr, exit  # noqa: E402

terminal = Terminal()

SYMBOLS = {
    'active': terminal.bold_green('✔ '),
    'dead': terminal.bold_black('✘ '),
    'unknown': terminal.bold_red('⚠ '),
    'neutral': '  ',
    'good': terminal.bold_green('✔ '),
    'bad': terminal.bold_red('✘ '),
}


def hsorted(seq):
    return natsorted(seq, alg=ns.IGNORECASE)


def sh(cmd, capture_output=True, check=True, echo=False):
    if echo:
        pcmd = cmd if isinstance(cmd, str) else join(cmd)
        print(terminal.bold_yellow('>>>'), terminal.bold(pcmd))
    if isinstance(cmd, str):
        cmd = split(cmd)
    return run(cmd, capture_output=capture_output, check=check)


def sh_stdout(cmd):
    return sh(cmd).stdout.decode().rstrip()


def sh_list(cmd):
    return hsorted(sh_stdout(cmd).splitlines())


def sh_tuple(cmd):
    return tuple(sh_stdout(cmd).splitlines())


def leader_cell(text, width, position, shape):
    i, j = position
    m, n = shape
    if i == 0:
        tlen = terminal.length(text)
        output = '─' * width
        if m > 1 and width > 2:
            output = output[:-2] + '┬─'
        output = text + output[tlen:]
    else:
        output = ' ' * width
        if width > 2:
            output = output[:-2] + ('├─' if i < m - 1 else '╰─')
    return output


def data_cell(text, width, position, shape):
    tlen = terminal.length(text)
    pad = terminal.bright_black('─' * (width - tlen - 2))
    return f'{pad}{text}'


def tabulate(results):
    leader_col_width = max(
        terminal.length(key)
        for key in results.keys()
    ) + 2
    data_col_width = max(
        terminal.length(item)
        for items in results.values()
        for item in items
    ) + 3
    if args.columns is None:
        n_cols = (terminal.width - leader_col_width) // data_col_width
    else:
        n_cols = args.columns
    n_cols = max(1, n_cols)
    for key, items in results.items():
        n_rows, rem = divmod(len(items), n_cols)
        n_rows += rem != 0
        shape = n_rows, n_cols
        for row, i in enumerate(range(0, len(items), n_cols)):
            print(leader_cell(key, leader_col_width, (row, 0), shape), end='')
            for col, item in enumerate(items[i:i + n_cols], start=1):
                print(data_cell(item, data_col_width, (row, col), shape), end='')
            print()


def do_list(args):
    outputs = parallel(
        CMD[t]
        for t in ('list bundles', 'list services', 'list longruns', 'list active')
    )
    all_bundles, all_services, longrun_services, active_services = (
        set(output.decode().splitlines())
        for output in outputs
    )

    expected_on = longrun_services & active_services
    outputs = parallel(
        pack(*CMD['pid'], str(SERVICEPATH / service))
        for service in expected_on
    )
    pids = { name: int(pid) for name, pid in zip(expected_on, outputs) }

    list_items = set(args.items)
    list_bundles = all_bundles & list_items if list_items else all_bundles
    list_services = all_services & list_items if list_items else all_services
    list_unknown = list_items - (list_bundles | list_services)

    outputs = parallel(CMD['list in bundle'] + (bundle,) for bundle in list_bundles)
    bundles = {
        bundle: set(output.decode().splitlines())
        for bundle, output in zip(list_bundles, outputs)
    }

    def get_bundle_state(services):
        if services <= active_services:
            return 'active'
        if services.isdisjoint(active_services):
            return 'dead'
        return 'neutral'

    bundle_states = {
        bundle: get_bundle_state(services)
        for bundle, services in bundles.items()
    }

    claimed_services = {
        service
        for bundle_services in bundles.values()
        for service in bundle_services
    }
    bundle_states[''] = get_bundle_state(list_services - claimed_services)
    bundle_states['unknown'] = 'unknown'

    result_items = hsorted(bundles.items()) + [
        ('', list_services - claimed_services),
        ('unknown', list_unknown),
    ]
    results = {}
    for bundle, bundle_services in result_items:
        if not bundle_services:
            continue
        color = {
            '': lambda text: text,
            'unknown': terminal.bold_red,
        }.get(bundle, terminal.bold_yellow)

        subbundles = {
            subbundle
            for subbundle, subbundle_services in bundles.items()
            if subbundle_services < bundle_services
        }
        subbundles = {
            a
            for a in subbundles
            if not any(bundles[a] < bundles[b] for b in subbundles)
        }
        results[bundle] = [
            f'{color(subbundle)} {SYMBOLS[bundle_states[subbundle]]}'
            for subbundle in hsorted(subbundles)
        ]
        printed_services = bundle_services.copy()
        for subbundle in subbundles:
            printed_services -= bundles[subbundle]

        if bundle == 'unknown':
            def get_symbol(service):  # type: ignore
                return SYMBOLS['unknown']
        else:
            def get_symbol(service):
                if service not in active_services:
                    return SYMBOLS['dead']
                if service in pids and pids[service] < 0:
                    return SYMBOLS['bad']
                return SYMBOLS['active']

        results[bundle] += [
            f"{service} {get_symbol(service)}"
            for service in hsorted(printed_services)
        ]
    tabulate({
        f'{SYMBOLS[bundle_states[bundle]]} {terminal.bold_yellow(bundle)}': contents
        for bundle, contents in results.items() }
    )


def do_start(args):
    sh(pack(*CMD['start'], *args.services), capture_output=False, echo=True)


def do_stop(args):
    sh(pack(*CMD['stop'], *args.services), capture_output=False, echo=True)


def do_restart(args):
    do_stop(args)
    do_start(args)


def do_add(args):
    bundles = lines(sh(CMD['list bundles']).stdout)
    add_cmd = pack(*CMD['add bundle'], args.bundle)
    if args.bundle in bundles:
        old_contents = set(lines(sh(pack(*CMD['list in bundle'], args.bundle)).stdout))
        new_contents = old_contents | set(args.services)
        sh(pack(*CMD['delete bundle'], args.bundle), capture_output=False, echo=True)
        try:
            sh(pack(*add_cmd, *new_contents), capture_output=False, echo=True)
        except CalledProcessError:
            sh(pack(*add_cmd, *old_contents), capture_output=False, echo=True)
            raise
    else:
        sh(pack(*add_cmd, *args.services), capture_output=False, echo=True)

    bundle_path = ADMINSVPATH / args.bundle
    bundle_type_path = bundle_path / 'type'
    bundle_contents_path = bundle_path / 'contents.d'

    if not bundle_path.exists():
        sh(pack(*CMD['mkdir'], str(bundle_path)), capture_output=False, echo=True)
    elif not bundle_path.is_dir():
        print(terminal.bold_red(f'not a directory: {bundle_path}'), file=stderr)
        exit(1)

    if not bundle_type_path.exists():
        sh(pack(*CMD['shell'], f'echo bundle > {quote(str(bundle_type_path))}'), capture_output=False, echo=True)
    elif bundle_type_path.read_bytes().strip() != b'bundle':
        print(terminal.bold_red(f'not a bundle path: {bundle_path} (according to {bundle_type_path})'), file=stderr)
        exit(1)

    if not bundle_contents_path.exists():
        sh(pack(*CMD['mkdir'], str(bundle_contents_path)), capture_output=False, echo=True)
    elif not bundle_contents_path.is_dir():
        print(terminal.bold_red(f'not a directory: {bundle_contents_path}'), file=stderr)
        exit(1)

    service_paths = (bundle_contents_path / service for service in args.services)
    for path in service_paths:
        sh(pack(*CMD['touch'], str(path)), capture_output=False, echo=True)


def do_delete(args):
    results = parallel((
        CMD['list bundles'],
        pack(*CMD['list in bundle'], args.bundle),
    ))
    all_bundles, bundle_services = ( set(lines(r)) for r in results )

    services_or_bundles = set(args.services)
    bundles = services_or_bundles & all_bundles
    services = services_or_bundles - bundles

    bundle_path = ADMINSVPATH / args.bundle
    bundle_type_path = bundle_path / 'type'
    bundle_contents_path = bundle_path / 'contents.d'

    bundle_path_valid = bundle_path.is_dir() and bundle_type_path.read_bytes().strip() == b'bundle' and bundle_contents_path.is_dir()

    if bundle_path_valid:
        for file in bundle_contents_path.iterdir():
            if file.name in services_or_bundles:
                sh(CMD['rm'] + (str(file),), capture_output=False, echo=True)
    else:
        print(terminal.bold_orange(f'WARNING: {bundle_path} does not refer to a bundle'), file=stderr)

    results = parallel((CMD['list in bundle'] + (b,) for b in bundles))
    services = services.union(*( set(lines(r)) for r in results ))

    new_services = bundle_services - services

    sh(pack(*CMD['delete bundle'], args.bundle), capture_output=False, echo=True)
    if new_services:
        add_cmd = pack(*CMD['add bundle'], args.bundle)
        sh(pack(*add_cmd, *new_services), capture_output=False, echo=True)
    if bundle_path_valid:
        if args.bundle not in ('default', 'network', 'mount-filesystems', 'rc-local'):
            for file in bundle_contents_path.iterdir():
                sh(CMD['rm'] + (str(file),), capture_output=False, echo=True)
            sh(pack(*CMD['rmdir'], str(bundle_contents_path)), capture_output=False, echo=True)
            sh(pack(*CMD['rm'   ], str(bundle_type_path    )), capture_output=False, echo=True)
            sh(pack(*CMD['rmdir'], str(bundle_path         )), capture_output=False, echo=True)
        else:
            print(terminal.bold_orange(f'WARNING: not deleting {bundle_path} because it may be important'), file=stderr)


def do_help(args):
    if not DOC_NAMES:
        print(terminal.bold_red(f"docs not found in {DOC_PATH}"))
        return
    if not args.items:
        tabulate({ terminal.bold_green('Available'): DOC_NAMES })
        print(terminal.bold_yellow(
            f"You can access {app}'s help with '{app} --help/-h'.\n"
            f"You can access each command's help with '{app} command --help/-h'."
        ))
        return
    items = []
    baditems = []
    for item in args.items:
        if item in DOC_NAMES:
            items.append(item)
        elif not item.startswith('s6-') and f's6-{item}' in DOC_NAMES:
            items.append(f's6-{item}')
        elif item not in baditems:
            baditems.append(item)
            if not item.startswith('s6-'):
                baditems.append(f's6-{item}')
    if baditems:
        available = [
            f'{item} {SYMBOLS["good" if item in items else "neutral"]}'
            for item in DOC_NAMES
        ]
        baditems = [ f'{item} {SYMBOLS["bad"]}' for item in baditems ]
        tabulate({
            terminal.bold_green('Available'): available,
            terminal.bold_red('Unavailable'): baditems,
        })
    else:
        doc_files = [ Path(DOC_PATH) / item for item in items ]
        sh(split(PAGER_HELP) + hsorted(str(f) for f in doc_files), capture_output=False, echo=True)


def do_rebuild(args):
    sh(CMD['rebuild database'], capture_output=False, echo=True)


def do_log(args):
    logs = set(args.items)
    names = {
        path.name
        for path in LOG_PATH.iterdir()
        if path.is_dir() and path.owner() == 's6log'
    }
    if not logs or logs - names:
        tabulate({
            terminal.bold_green('Available'): hsorted(names),
            terminal.bold_red('Unavailable'): hsorted(logs - names),
        })
    else:
        log_files = {
            LOG_PATH / name / 'current'
            for name in logs or names
        }
        sh(split(PAGER) + hsorted(str(f) for f in log_files), capture_output=False, echo=True)


if args.pager is not None:
    PAGER = args.pager

try:
    globals()[f'do_{args.command}'](args)
except CalledProcessError as e:
    print(terminal.bright_red(str(e)))
    if e.stdout:
        print(e.stdout.decode())
    if e.stderr:
        print(terminal.red(e.stderr.decode()), file=stderr)
